---
import { Icon } from "astro-icon/components";
import { Card } from "../ui/card";
import { CustomHoverCard } from "./CustomHoverCard";
import type { CollectionEntry } from "astro:content";

interface Prop {
  skill: CollectionEntry<"skill">;
}

const { skill } = Astro.props as Prop;
---

<CustomHoverCard client:load skill={skill}>
  <Card
    className="skill-card max-w-32 h-36 group cursor-pointer flex flex-col items-center text-center text-muted-foreground hover:transition-all hover:duration-300 hover:bg-terciary/5"
  >
    <div class="skill-icon-wrapper flex flex-col items-center">
      <Icon
        name={skill.data.icon}
        class="skill-icon w-12 lg:w-14 h-12 lg:h-14 filter grayscale group-hover:grayscale-0 transition-all duration-300"
      />
    </div>
    <p class="skill-text text-xs md:text-sm break-words px-3">
      {skill.data.skill}
    </p>
  </Card>
</CustomHoverCard>

<script>
  import { gsap } from "gsap";

  function animationCard() {
    // Buscar las cards
    const cards = document.querySelectorAll(".skill-card");

    // Si no hay cards en esta página, no hacer nada
    if (cards.length === 0) return;

    cards.forEach((card) => {
      const icon = card.querySelector(".skill-icon");
      const iconWrapper = card.querySelector(".skill-icon-wrapper");
      const text = card.querySelector(".skill-text");

      if (!icon || !iconWrapper || !text) return;

      card.addEventListener("mouseenter", () => {
        gsap.killTweensOf([card, icon, text]);

        gsap.to(icon, {
          rotation: 360,
          scale: 1,
          duration: 0.6,
          ease: "back.out(1.3)",
          overwrite: "auto",
        });

        gsap.to(text, {
          y: -5,
          duration: 0.3,
          ease: "power2.out",
          overwrite: "auto",
        });
      });

      card.addEventListener("mouseleave", () => {
        gsap.killTweensOf([card, icon, text]);

        gsap.to(icon, {
          rotation: 0,
          scale: 1,
          duration: 0.3,
          ease: "power2.inOut",
          overwrite: "auto",
        });

        gsap.to(text, {
          y: 0,
          duration: 0.3,
          ease: "power2.inOut",
          overwrite: "auto",
        });
      });

      // Matar animaciones previas antes de crear nuevas
      gsap.killTweensOf(iconWrapper);
      
      gsap.to(iconWrapper, {
        scale: 1.05,
        duration: 2,
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
    });
  }

  animationCard();
  document.addEventListener("astro:page-load", animationCard);
  
  // Limpiar al salir de la página
  document.addEventListener("astro:before-preparation", () => {
    gsap.killTweensOf(".skill-icon-wrapper");
  });
</script>
