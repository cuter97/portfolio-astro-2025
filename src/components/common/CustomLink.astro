---
import { cva, type VariantProps } from "class-variance-authority";
import { CustomTooltip } from "./CustomTooltip";
import { cn } from "@/lib/utils";
import type { HTMLAttributes } from "astro/types";

const linkVariants = cva("flex items-center space-x-2", {
  variants: {
    variant: {
      default:
        "hover:underline hover:decoration-dotted hover:text-terciary underline-offset-4 font-titan-one",
      primary:
        "underline text-terciary underline-offset-4 hover:decoration-dotted hover:text-primary font-titan-one",
      secondary:
        "h-9 w-max rounded-md bg-background px-4 py-2 text-base font-medium hover:bg-foreground/10 hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1",
    },
    size: {
      default: "text-lg lg:text-xl",
      xl: "text-lg lg:text-2xl",
      md: "text-base",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

interface Props
  extends Omit<HTMLAttributes<"a">, "type">,
    VariantProps<typeof linkVariants> {
  href: string;
  className?: string;
  descriptionTooltip?: string;
  tooltip?: boolean;
}

const {
  variant,
  size,
  href,
  className,
  descriptionTooltip,
  tooltip = true,
  ...rest
} = Astro.props;
---

{
  tooltip ? (
    <CustomTooltip client:only="react" description={descriptionTooltip ?? ""}>
      <a
        href={href}
        class={cn(linkVariants({ variant, size, class: className }))}
        {...rest}
      >
        <slot />
      </a>
    </CustomTooltip>
  ) : (
    <a
      href={href}
      class={cn(linkVariants({ variant, size, class: className }))}
      {...rest}
    >
      <slot />
    </a>
  )
}
