---
import type { GetStaticPaths } from "astro";
import Layout from "@/layouts/Layout.astro";
import { getCollection } from "astro:content";
import { render } from "astro:content";
import { CustomTooltip } from "@/components/common/CustomTooltip";
import CardSkill from "@/components/common/CardSkill.astro";
import { ChevronLeft, ExternalLink } from "lucide-react";
import { useTranslation } from "@/lib/utils";
import type { lenguages } from "@/i18n/ui";

export const prerender = true;
export const getStaticPaths = (async () => {
  const projects = await getCollection("project");
  const skills = await getCollection("skill");

  return projects.map((project) => {
    const [lang, slug] = project.id.split("/");

    const projectSkills = skills.filter(
      (skill) =>
        project.data.pageTags.some((tag) => skill.id.endsWith(tag.id)) &&
        skill.data.lang === project.data.lang
    );

    return {
      params: { lang, slug },
      props: {
        project,
        skills: projectSkills,
      },
    };
  });
}) satisfies GetStaticPaths;

const currentLang = Astro.currentLocale || "en";
const t = useTranslation(currentLang as keyof typeof lenguages);
const { project, skills } = Astro.props;
const { Content } = await render(project);
---

<Layout title={project.data.title}>
  <div class="max-w-7xl mx-auto">
    <a
      href={`/${project.id.split("/")[0]}/#projects`}
      class="inline-flex items-center gap-2 px-6 py-2 bg-muted-foreground/10 hover:bg-foreground hover:text-background rounded-full text-sm font-medium transition-colors"
    >
      <ChevronLeft size={16} />
      {t("buttons.back")}
    </a>
  </div>
  <article
    transition:name="transition"
    transition:animate="fade"
    class="flex flex-col lg:flex-row justify-center lg:gap-10 xl:gap-20 pb-10 px-4 xl:px-0 pt-10"
  >
    <div class="card-project lg:max-w-2xl xl:max-w-3xl">
      <Content />
    </div>
    <div class="space-y-6 max-w-3xl mt-6 lg:mt-0">
      {
        project.data.demoLink && (
          <div class="flex items-center space-x-2">
            <span class="text-lg lg:text-xl font-bold">
              {t("index.projects.projectSlug.website")}:
            </span>
            <CustomTooltip client:load description={t("tooltips.viewWebsite")}>
              <a
                href={project.data.demoLink}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center space-x-2 underline hover:decoration-dotted hover:text-terciary underline-offset-4 text-lg lg:text-xl"
              >
                <span>{project.data.title}</span>
                <ExternalLink size={18} className="text-terciary" />
              </a>
            </CustomTooltip>
          </div>
        )
      }
      {
        project.data.githubLink && (
          <div class="flex items-center space-x-2">
            <span class="text-lg lg:text-xl font-bold">
              {t("index.projects.projectSlug.code")}:
            </span>
            <CustomTooltip client:load description={t("tooltips.viewCode")}>
              <a
                href={project.data.githubLink}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center space-x-2 underline hover:decoration-dotted hover:text-terciary underline-offset-4 text-lg lg:text-xl"
              >
                <span>Github</span>
                <ExternalLink size={18} className="text-terciary" />
              </a>
            </CustomTooltip>
          </div>
        )
      }
      <div class="space-y-4">
        <h4 class="text-xl font-bold">
          {t("index.projects.projectSlug.technology")}:
        </h4>
        <ul class="grid grid-cols-3 gap-2">
          {skills?.map((skill) => <CardSkill skill={skill} />)}
        </ul>
      </div>
    </div>
  </article>
</Layout>
